plugins {
    id 'groovy'
    id 'java'
    id 'java-gradle-plugin'
    id 'idea'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
    id 'com.gradle.plugin-publish' version '0.14.0'
    id 'signing'
}

def defGroupId = 'com.appland'
def defArtifactId = 'appmap-gradle-plugin'
def defName = 'AppMap Gradle Plugin'
def defVersion = "1.2.0"
def defDescription = 'Gradle plugin to record AppMaps'
def defGitSlug = "applandinc/appmap-gradle-plugin"
def defMavenRepo = 'https://s01.oss.sonatype.org'

def paramSignKey = findProperty('signingKey')
def paramSignPassword = findProperty("signingPassword")
def paramRepoUsername = findProperty('ossrhUsername')
def paramRepoPassword = findProperty('ossrhPassword')
def paramGradleKey = findProperty('gradlePublishKey')
def paramGradleSecret = findProperty('gradlePublishSecret')
def paramDescription = findProperty('artifactDescription') ?: defDescription
def paramName = findProperty('artifactName') ?: defName
def paramGroupId = findProperty('publicationGroupId') ?: defGroupId
def paramGitSlug = System.getenv("TRAVIS_REPO_SLUG") ?: defGitSlug
def paramMavenRepo = findProperty('mavenRepo') ?: defMavenRepo

def paramVersion = findProperty('paramVersion')
def travisVersion = System.getenv("TRAVIS_BRANCH")
def versionLikeRegexp = /^\d+\.\d+.*/
def travisVersionOK = travisVersion && (travisVersion ==~ versionLikeRegexp)

paramVersion = paramVersion ?: (travisVersionOK ? travisVersion : defVersion)
if (findProperty('snapshot') != null) {
    paramVersion += '-SNAPSHOT'
}

println "version:$paramVersion"

version = paramVersion
group = paramGroupId

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}

dependencies {
    gradleApi()
    localGroovy()
    testImplementation(enforcedPlatform("org.junit:junit-bom:5.10.0")) // JUnit 5 BOM
    testImplementation("org.junit.jupiter:junit-jupiter")

    implementation 'com.appland:appmap-agent:[1.3, 2.0)'
    implementation 'commons-lang:commons-lang:2.6'
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'org.assertj:assertj-core:3.15.0'
}

project.ext.set('gradle.publish.key', paramGradleKey)
project.ext.set('gradle.publish.secret', paramGradleSecret)

pluginBundle {
    website = 'https://appland.com'
    vcsUrl = "https://github.com/${paramGitSlug}"
    tags = [
        'architecture',
        'code analysis',
        'diagram',
        'diff',
        'security',
        'software',
        'design',
        'technical',
        'debt',
        'trace',
        'uml',
        'visualization'
    ]
}

gradlePlugin {
    plugins {
        appmapPlugin {
            id = 'com.appland.appmap'
            displayName = 'AppMap plugin'
            description = 'Interactive maps and architecture analysis to help you write better Java.'
            implementationClass = 'com.appland.appmap.gradle.AppMapPlugin'
        }
    }
}

apply plugin: 'java'
java {
    withSourcesJar()
    withJavadocJar()
}

apply plugin: 'maven-publish'
publishing {
    publications {
        withType(MavenPublication) {
            pom {
                name = paramName
                description = paramDescription
                version = paramVersion
                url = "https://appland.com"

                licenses {
                    license {
                        name = "MIT"
                        url = "https://raw.githubusercontent.com/$paramGitSlug/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        name = "Kevin Gilpin"
                        email = "kevin@appland.com"
                        organization = "AppLand Inc."
                        url = "https://dev.to/kgilpin"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/${paramGitSlug}.git"
                    developerConnection = "scm:git:ssh://github.com:${paramGitSlug}.git"
                    url = "https://github.com/${paramGitSlug}/tree/master"
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri(paramMavenRepo + "/service/local/")
            snapshotRepositoryUrl = uri(paramMavenRepo + "/content/repositories/snapshots")
            username = paramRepoUsername
            password = paramRepoPassword
        }
    }
}

if (project.hasProperty("signingKey")) {
    apply plugin: 'signing'

    signing {
        def signingKey = paramSignKey
        def signingPassword = paramSignPassword
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }
}
